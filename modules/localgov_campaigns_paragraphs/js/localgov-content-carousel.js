/**
 * @file
 * Localgov Content carousel behaviour.
 *
 * DO NOT EDIT THIS FILE.
 * Any changes need to be made in localgov-content-carousel.es6.js file and
 * compiled into this file.
 */

(function (Drupal) {
  Drupal.behaviors.localgovContentCarousel = {
    /**
     * Attach content carousel behaviour.
     *
     * @param {object} context
     *   DOM object.
     */
    attach: function attach(context) {
      var contentCarousels = context.querySelectorAll('.content-carousel');
      for (var i = 0; i < contentCarousels.length; i++) {
        var contentCarousel = contentCarousels[i].querySelectorAll('.glide')[0];
        this.init(contentCarousel, i);
      }
    },


    /**
     * Initialise carousel.
     *
     * @param {HTMLElement} contentCarousel
     *   Content carousel element.
     */
    init: function init(contentCarousel) {
      /* global Glide */
      var disableArrows = function disableArrows(Glide, Components) {
        return {
          mount: function mount() {
            Glide.on(['mount.after', 'run'], function () {
              // Only do this for arrows controls.
              for (var i = 0; i < Components.Controls.items.length; i++) {
                var controlItem = Components.Controls.items[i];
                if (controlItem.className === 'glide__arrows') {
                  var leftArrow = controlItem.querySelector('.glide__arrow--left');
                  var rightArrow = controlItem.querySelector('.glide__arrow--right');

                  if (leftArrow) {
                    // Disable previous arrow on first slide, enable it on others.
                    if (Glide.index === 0) {
                      leftArrow.setAttribute('disabled', '');
                    } else {
                      leftArrow.removeAttribute('disabled');
                    }
                  }

                  if (rightArrow) {
                    // Disable next arrow on last slide, enable it on others.
                    if (Glide.index === Components.Sizes.length - Glide.settings.perView) {
                      rightArrow.setAttribute('disabled', '');
                    } else {
                      rightArrow.removeAttribute('disabled');
                    }
                  }
                }
              }
            });
          }
        };
      };

      var carousel = new Glide(contentCarousel);
      carousel.mount({ disableArrows: disableArrows });
    }
  };
})(Drupal);
